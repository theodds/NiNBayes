// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CCMVMI
arma::umat CCMVMI(const arma::umat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta);
RcppExport SEXP _NiNBayes_CCMVMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(CCMVMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta));
    return rcpp_result_gen;
END_RCPP
}
// CCMVGcomp
arma::vec CCMVGcomp(int N_sim, int J, int j_0, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double& xi);
RcppExport SEXP _NiNBayes_CCMVGcomp(SEXP N_simSEXP, SEXP JSEXP, SEXP j_0SEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_sim(N_simSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type j_0(j_0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(CCMVGcomp(N_sim, J, j_0, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi));
    return rcpp_result_gen;
END_RCPP
}
// MARMI
arma::umat MARMI(const arma::umat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta);
RcppExport SEXP _NiNBayes_MARMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MARMI(Y, R, omega, log_omega, beta, log_beta, log_1_m_beta));
    return rcpp_result_gen;
END_RCPP
}
// LogSumExp
double LogSumExp(arma::vec x);
RcppExport SEXP _NiNBayes_LogSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSumExp(x));
    return rcpp_result_gen;
END_RCPP
}
// NIPMI
arma::mat NIPMI(const arma::mat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const int j_0);
RcppExport SEXP _NiNBayes_NIPMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP j_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type j_0(j_0SEXP);
    rcpp_result_gen = Rcpp::wrap(NIPMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, j_0));
    return rcpp_result_gen;
END_RCPP
}
// ParafacGcomp
arma::vec ParafacGcomp(int N_sim, int J, int j_0, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double& xi);
RcppExport SEXP _NiNBayes_ParafacGcomp(SEXP N_simSEXP, SEXP JSEXP, SEXP j_0SEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_sim(N_simSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type j_0(j_0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(ParafacGcomp(N_sim, J, j_0, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi));
    return rcpp_result_gen;
END_RCPP
}
// UpdateClassMARCpp
List UpdateClassMARCpp(arma::umat Y, arma::umat R, arma::mat log_beta, arma::mat log_1_m_beta, arma::vec log_omega);
RcppExport SEXP _NiNBayes_UpdateClassMARCpp(SEXP YSEXP, SEXP RSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP log_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_omega(log_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateClassMARCpp(Y, R, log_beta, log_1_m_beta, log_omega));
    return rcpp_result_gen;
END_RCPP
}
// TLOMI
arma::mat TLOMI(const arma::mat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double xi, const int j_0);
RcppExport SEXP _NiNBayes_TLOMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP, SEXP j_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const int >::type j_0(j_0SEXP);
    rcpp_result_gen = Rcpp::wrap(TLOMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi, j_0));
    return rcpp_result_gen;
END_RCPP
}
// UpdateBetaCpp
arma::mat UpdateBetaCpp(arma::mat success_counts, arma::mat failure_counts, arma::vec col_shape_1, arma::vec col_shape_2);
RcppExport SEXP _NiNBayes_UpdateBetaCpp(SEXP success_countsSEXP, SEXP failure_countsSEXP, SEXP col_shape_1SEXP, SEXP col_shape_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type success_counts(success_countsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type failure_counts(failure_countsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type col_shape_1(col_shape_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type col_shape_2(col_shape_2SEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateBetaCpp(success_counts, failure_counts, col_shape_1, col_shape_2));
    return rcpp_result_gen;
END_RCPP
}
// UpdateSufficient
List UpdateSufficient(arma::umat Y, arma::umat R, arma::uvec C, int K);
RcppExport SEXP _NiNBayes_UpdateSufficient(SEXP YSEXP, SEXP RSEXP, SEXP CSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateSufficient(Y, R, C, K));
    return rcpp_result_gen;
END_RCPP
}
// UpdateClassCpp
List UpdateClassCpp(arma::umat Y, arma::umat R, arma::mat log_beta, arma::mat log_1_m_beta, arma::mat log_gamma, arma::mat log_1_m_gamma, arma::vec log_omega);
RcppExport SEXP _NiNBayes_UpdateClassCpp(SEXP YSEXP, SEXP RSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP log_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_omega(log_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateClassCpp(Y, R, log_beta, log_1_m_beta, log_gamma, log_1_m_gamma, log_omega));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP _NiNBayes_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _NiNBayes_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _NiNBayes_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _NiNBayes_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _NiNBayes_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP noshare_impute(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_NiNBayes_CCMVMI", (DL_FUNC) &_NiNBayes_CCMVMI, 10},
    {"_NiNBayes_CCMVGcomp", (DL_FUNC) &_NiNBayes_CCMVGcomp, 12},
    {"_NiNBayes_MARMI", (DL_FUNC) &_NiNBayes_MARMI, 7},
    {"_NiNBayes_LogSumExp", (DL_FUNC) &_NiNBayes_LogSumExp, 1},
    {"_NiNBayes_NIPMI", (DL_FUNC) &_NiNBayes_NIPMI, 11},
    {"_NiNBayes_ParafacGcomp", (DL_FUNC) &_NiNBayes_ParafacGcomp, 12},
    {"_NiNBayes_UpdateClassMARCpp", (DL_FUNC) &_NiNBayes_UpdateClassMARCpp, 5},
    {"_NiNBayes_TLOMI", (DL_FUNC) &_NiNBayes_TLOMI, 12},
    {"_NiNBayes_UpdateBetaCpp", (DL_FUNC) &_NiNBayes_UpdateBetaCpp, 4},
    {"_NiNBayes_UpdateSufficient", (DL_FUNC) &_NiNBayes_UpdateSufficient, 4},
    {"_NiNBayes_UpdateClassCpp", (DL_FUNC) &_NiNBayes_UpdateClassCpp, 7},
    {"_NiNBayes_rcpp_hello", (DL_FUNC) &_NiNBayes_rcpp_hello, 0},
    {"_NiNBayes_rcpparma_hello_world", (DL_FUNC) &_NiNBayes_rcpparma_hello_world, 0},
    {"_NiNBayes_rcpparma_outerproduct", (DL_FUNC) &_NiNBayes_rcpparma_outerproduct, 1},
    {"_NiNBayes_rcpparma_innerproduct", (DL_FUNC) &_NiNBayes_rcpparma_innerproduct, 1},
    {"_NiNBayes_rcpparma_bothproducts", (DL_FUNC) &_NiNBayes_rcpparma_bothproducts, 1},
    {"noshare_impute",                  (DL_FUNC) &noshare_impute,                  11},
    {NULL, NULL, 0}
};

RcppExport void R_init_NiNBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
